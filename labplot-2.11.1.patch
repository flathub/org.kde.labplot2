diff -ruNa labplot-2.11.1.orig/src/backend/datasources/filters/AsciiFilter.cpp labplot-2.11.1/src/backend/datasources/filters/AsciiFilter.cpp
--- labplot-2.11.1.orig/src/backend/datasources/filters/AsciiFilter.cpp	2024-07-15 22:50:37.000000000 +0200
+++ labplot-2.11.1/src/backend/datasources/filters/AsciiFilter.cpp	2024-11-16 01:25:50.404429507 +0100
@@ -204,13 +204,12 @@
 	// 	if (!device.canReadLine())
 	// 		return -1;
 
-	size_t lineCount = 0;
 #if defined(Q_OS_LINUX) || defined(Q_OS_BSD4)
 	if (maxLines == std::numeric_limits<std::size_t>::max()) { // only when reading all lines
 		// on Linux and BSD use grep, if available, which is much faster than counting lines in the file
 		// wc -l does not count last line when not ending in line break!
 		DEBUG(Q_FUNC_INFO << ", using 'grep' or 'sed' to count lines")
-		QString cmdFullPath = safeExecutableName(QStringLiteral("grepxx"));
+		QString cmdFullPath = safeExecutableName(QStringLiteral("grep"));
 		QStringList options;
 		options << QStringLiteral("-e") << QStringLiteral("^") << QStringLiteral("-c") << fileName;
 		if (cmdFullPath.isEmpty()) { // alternative: sed -n '$='
@@ -240,6 +239,7 @@
 	}
 #endif
 
+	size_t lineCount = 0;
 	while (!device.atEnd()) {
 		if (lineCount >= maxLines) // stop when maxLines available
 			return lineCount;
@@ -665,8 +665,13 @@
 		DEBUG(Q_FUNC_INFO << ", column mode (after checking more lines) = " << ENUM_TO_STRING(AbstractColumn, ColumnMode, mode));
 #endif
 
+	// if header enabled: increase max lines (not if size_t::max())
+	size_t maxLinesToRead = maxLines;
+	if (headerEnabled && maxLines < std::numeric_limits<std::size_t>::max())
+		maxLinesToRead++;	
+
 	// ATTENTION: This resets the position in the device to 0
-	m_actualRows = (int)q->lineNumber(device, maxLines);
+	m_actualRows = (int)q->lineNumber(device, maxLinesToRead);
 	DEBUG(Q_FUNC_INFO << ", m_actualRows: " << m_actualRows << ", startRow (after header): " << startRow << ", endRow: " << endRow)
 
 	DEBUG(Q_FUNC_INFO << ", headerEnabled = " << headerEnabled << ", headerLine = " << headerLine << ", m_actualStartRow = " << m_actualStartRow)
